package com.dvpermyakov.dagger.spec.typeimport com.dvpermyakov.dagger.spec.func.OverrideGetFunSpecFactoryimport com.dvpermyakov.dagger.utils.*import com.squareup.kotlinpoet.FunSpecimport com.squareup.kotlinpoet.KModifierimport com.squareup.kotlinpoet.PropertySpecimport com.squareup.kotlinpoet.TypeSpecimport javax.annotation.processing.Generatedimport javax.annotation.processing.ProcessingEnvironmentimport javax.lang.model.element.ExecutableElementclass InjectConstructorSpecFactory(    private val processingEnv: ProcessingEnvironment,    private val className: String,    private val constructorElement: ExecutableElement) : TypeSpecFactory {    override fun create(): TypeSpec {        val classElement = constructorElement.enclosingElement        val classClassName = classElement.toClassName(processingEnv)        val parameters = constructorElement            .getParametersClassName(processingEnv)            .map { parameterClassName -> parameterClassName.toProviderParameterData() }        val getCodeStatement = "return ${classClassName.simpleName}(" +            "${parameters.joinToString(", ") { parameter ->                "${parameter.name}.get()"            }})"        return TypeSpec.classBuilder(className)            .addAnnotation(Generated::class.java)            .setConstructorSpec(parameters)            .addSuperinterface(classClassName.toFactoryClassName())            .addFunction(OverrideGetFunSpecFactory(                returnTypeName = classClassName,                statement = getCodeStatement            ).create())            .build()    }    private fun TypeSpec.Builder.setConstructorSpec(        parameters: List<ParameterData>    ): TypeSpec.Builder {        val funSpecBuilder = FunSpec.constructorBuilder()        parameters.forEach { parameter ->            funSpecBuilder.addParameter(parameter.name, parameter.typeName, KModifier.PRIVATE)        }        this.primaryConstructor(funSpecBuilder.build())        parameters.forEach { parameter ->            this.addProperty(                PropertySpec.builder(parameter.name, parameter.typeName).initializer(parameter.name).build()            )        }        return this    }}